WITH PERSONIO_PEX AS (
	SELECT *
		, SUM (CASE WHEN PREVIOUS_HASH = HASH2  THEN 0 ELSE 1 END) OVER (PARTITION BY EMPLOYEE_ID ORDER BY RN_) AS ISLAND_ID
	FROM (
		SELECT *  -- NOTE: Required FOR islands/gap
			, LAG(HASH2) OVER (PARTITION BY EMPLOYEE_ID ORDER BY VALID_FROM, VALID_TO)		AS PREVIOUS_HASH
			, ROW_NUMBER () OVER (PARTITION BY EMPLOYEE_ID ORDER BY VALID_FROM, VALID_TO) 	AS RN_
		FROM (
			SELECT
				IFNULL(spe.EMPLOYEE_NAME, sfpe.EMPLOYEE_NAME)								AS c_EMP_NAME
				, spe.EMPLOYEE_ID
				, spe.GENDER
			 	, spe.EXTERNAL_EMPLOYEE
				, spe.ACTIVE_EMPLOYEE
				, spe.EMPLOYMENT_START_DATE
				, spe.EMPLOYMENT_END_DATE
				, spe.TERMINATION_REASON
				, spe.EMPLOYMENT_TYPE
				, spe.WEEKLY_WORKING_HOUR
				, IFF(spe.EMPLOYEE_NAME in ('Steffen Mangold', 'Johannes Burgard'), 'Management', spe.DEPARTMENT) 						AS DEPARTMENT
				, spe.SUB_DEPARTMENT
				, HASH(spe.HASH_KEY, HASH(sfpe.GROSS_SALARY, sfpe.SOCIAL_SECURITY)) 		AS HASH2
				, LEAD(IFNULL(sfpe.DATE_KEY, spe.VALID_FROM)) OVER	(PARTITION BY c_EMP_NAME ORDER BY IFNULL(sfpe.DATE_KEY, spe.VALID_FROM) asc)	AS LEAD_VALID_FROM
				, ROW_NUMBER() OVER	(PARTITION BY c_EMP_NAME,  spe.VALID_FROM ORDER BY sfpe.DATE_KEY asc)								AS RN_ASC
				, IFF(spe.EMPLOYEE_ID IS NULL,sfpe.DATE_KEY,
					CASE
					WHEN rn_asc = 1 AND spe.VALID_FROM	 < sfpe.DATE_KEY THEN spe.VALID_FROM
					WHEN spe.VALID_FROM <= sfpe.DATE_KEY THEN sfpe.DATE_KEY
					ELSE spe.VALID_FROM END		)																						AS VALID_FROM
				, IFF(spe.VALID_TO <=  lead_valid_from, spe.VALID_TO, lead_valid_from)													AS VALID_TO
				, IFNULL(sfpe.GROSS_SALARY, FIRST_value(sfpe.GROSS_SALARY) OVER (PARTITION BY c_EMP_NAME ORDER BY sfpe.DATE_KEY)) 		AS GROSS_SALARY
				, IFNULL(sfpe.SOCIAL_SECURITY, FIRST_value(sfpe.SOCIAL_SECURITY) OVER (PARTITION BY c_EMP_NAME ORDER BY sfpe.DATE_KEY)) AS SOCIAL_SECURITY
			FROM {{ ref('staging_personio_employees') }} spe
			FULL OUTER JOIN {{ ref('staging_flatfiles_personnel_expenses') }} sfpe
				ON sfpe.EMPLOYEE_NAME = spe.EMPLOYEE_NAME AND sfpe.DATE_KEY >= spe.VALID_FROM AND sfpe.DATE_KEY < spe.VALID_TO
			WHERE (GROSS_SALARY != 0 OR SOCIAL_SECURITY != 0)
			)
		) island
)

SELECT
 	DENSE_RANK() OVER (ORDER BY IFNULL(sho.EMPLOYEE_NAME, pp.c_EMP_NAME), sho.OWNER_ID, MAX(VALID_FROM))	AS OWNER_SK
	, sho.OWNER_ID
	, pp.EMPLOYEE_ID 																		AS PERSONIO_ID
	, sho.USER_ID
	, IFNULL(sho.EMPLOYEE_NAME, pp.c_EMP_NAME)												AS EMPLOYEE_NAME
	, pp.GENDER
	, sho.EMAIL
	, CASE WHEN sho.EMAIL	 LIKE '%solytic.com' 	THEN TRUE
		WHEN pp.EXTERNAL_EMPLOYEE = FALSE 			THEN TRUE
		ELSE FALSE END																		AS 	SOLYTIC_EMPLOYEE
	, IFNULL(pp.ACTIVE_EMPLOYEE, FALSE)														AS 	ACTIVE_EMPLOYEE
	, pp.EMPLOYMENT_START_DATE
	, pp.EMPLOYMENT_END_DATE
	, pp.TERMINATION_REASON
	, pp.EMPLOYMENT_TYPE
	, pp.WEEKLY_WORKING_HOUR
	, IFNULL(pp.DEPARTMENT, sho.TEAM_1)														AS DEPARTMENT
	, pp.SUB_DEPARTMENT
	, pp.GROSS_SALARY																		AS GROSS_SALARY
	, pp.SOCIAL_SECURITY 																	AS SOCIAL_SECURITY
	, MIN(IFNULL(pp.VALID_FROM, '2015-01-01'))												AS VALID_FROM
	, MAX(IFNULL(pp.VALID_TO, '9999-12-31'))												AS VALID_TO
	, IFF(MAX(IFNULL(pp.VALID_TO, '9999-12-31')) = '9999-12-31', TRUE, FALSE)				AS ACTIVE_INDICATOR
FROM PERSONIO_PEX pp
FULL OUTER JOIN {{ ref('staging_hubspot_owners') }} sho ON pp.c_EMP_NAME = sho.EMPLOYEE_NAME AND sho.EMAIL	 LIKE '%solytic.com'
GROUP BY IFNULL(sho.EMPLOYEE_NAME, pp.c_EMP_NAME)
	,sho.OWNER_ID
	, pp.EMPLOYEE_ID
	, sho.USER_ID
	, IFNULL(sho.EMPLOYEE_NAME, pp.c_EMP_NAME)
	, pp.GENDER
	, sho.EMAIL
	, CASE WHEN sho.EMAIL	 LIKE '%solytic.com' 	THEN TRUE
		WHEN pp.EXTERNAL_EMPLOYEE = FALSE 			THEN TRUE
		ELSE FALSE END
	, IFNULL(pp.ACTIVE_EMPLOYEE, FALSE)
	, pp.EMPLOYMENT_START_DATE
	, pp.EMPLOYMENT_END_DATE
	, pp.TERMINATION_REASON
	, pp.EMPLOYMENT_TYPE
	, pp.WEEKLY_WORKING_HOUR
	, IFNULL(pp.DEPARTMENT, sho.TEAM_1)
	, pp.SUB_DEPARTMENT
	, pp.GROSS_SALARY
	, pp.SOCIAL_SECURITY
	, ISLAND_ID