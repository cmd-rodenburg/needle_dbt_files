WITH PEX AS (

SELECT OWNER_SK
	, EMPLOYEE_NAME
	, WEEKLY_WORKING_HOUR * 4		 	AS HOURS_MONTH
	, GROSS_SALARY + SOCIAL_SECURITY 	AS PEX_MONTH
	, ROUND(PEX_MONTH/HOURS_MONTH, 1)	AS PEX_HOUR
	, VALID_FROM
	, VALID_TO
FROM  {{ ref('core_dim_owner') }}
WHERE OWNER_ID IS NOT NULL
	AND PEX_MONTH IS NOT NULL

), ENGAGEMENTS AS (

	SELECT DISTINCT ENGAGEMENT_ID
		, COMPANY_SK
		, OWNER_SK
		, TIMESTAMP_KEY
		, ENGAGEMENT_TYPE
		-- NOTE: MINUTES TO HOURS
		, DIV0(IFF(NUM_COMPANIES = 0, TOTAL_DURATION_MIN , DIV0(TOTAL_DURATION_MIN , NUM_COMPANIES)), 60) AS normalized_time
	FROM {{ ref('core_fact_engagements') }} CFE
	WHERE TOTAL_DURATION_MIN > 0

)

-- NOTE: TIME & COSTS SPENT WORKING ON LOGGED HUBSPOT TICKETS
SELECT CFT.COMPANY_SK																AS COMPANY_SK
	, CFT.OWNER_SK 																	AS OWNER_SK
	, CFT.CREATE_DATE:: DATE 														AS DATE_KEY
	, SUM(IFNULL(TIME_TO_SOLUTION, TIME_TO_CLOSE))/60  								AS HOURS_TOTAL
	, SUM(IFNULL(TIME_TO_SOLUTION, TIME_TO_CLOSE)/60 * IFNULL(PEX.PEX_HOUR, 10)) 	AS COST_TOTAL
	, 'Ticket'																		AS COST_TYPE
FROM {{ ref('datamart_dim_ticket_active') }} CFT
INNER JOIN PEX ON PEX.OWNER_SK = CFT.OWNER_SK
	AND CFT.CREATE_DATE:: DATE BETWEEN PEX.VALID_FROM AND PEX.VALID_TO
WHERE IFNULL(TIME_TO_SOLUTION, TIME_TO_CLOSE) IS NOT NULL
	AND CFT.OWNER_SK IS NOT NULL
GROUP BY CFT.COMPANY_SK
	, CFT.OWNER_SK
	, CFT.CREATE_DATE:: DATE
UNION ALL

-- NOTE: TIME & COSTS SPENT WORKING IN LOGGED HUBSPOT ENGAGEMENTS
SELECT IFNULL(CFE.COMPANY_SK, -1)													AS COMPANY_SK
	, CFE.OWNER_SK
	, CFE.TIMESTAMP_KEY  					::DATE									AS DATE_KEY
	, SUM(normalized_time)							  								AS HOURS_TOTAL
	, SUM(normalized_time * IFNULL(PEX.PEX_HOUR, 10))								AS COST_TOTAL
	, 'Engagement'																	AS COST_TYPE
FROM ENGAGEMENTS CFE
INNER JOIN PEX ON PEX.OWNER_SK = CFE.OWNER_SK
	AND CFE.OWNER_SK IS NOT NULL
	AND CFE.TIMESTAMP_KEY:: DATE BETWEEN PEX.VALID_FROM AND PEX.VALID_TO
GROUP BY  CFE.COMPANY_SK
	, CFE.OWNER_SK
	, CFE.TIMESTAMP_KEY  								::DATE

UNION ALL

-- NOTE: TIME & COSTS SPENT WORKING ON JIRA SPRINT ISSUES
SELECT IFNULL(CFSI.COMPANY_SK, -1)													AS COMPANY_SK
	, CFSI.OWNER_SK
	, CFSI.DATE_KEY
	, SUM(TIME_HOURS)							  									AS HOURS_TOTAL
	, SUM(TIME_HOURS * IFNULL(PEX.PEX_HOUR, 10))									AS COST_TOTAL
	, 'Tech issues'																	AS COST_TYPE
FROM {{ ref('core_fact_sprint_issues') }} CFSI
INNER JOIN PEX ON PEX.OWNER_SK = CFSI.OWNER_SK
	AND CFSI.OWNER_SK IS NOT NULL
	AND CFSI.DATE_KEY BETWEEN PEX.VALID_FROM AND PEX.VALID_TO
GROUP BY CFSI.COMPANY_SK
	, CFSI.OWNER_SK
	, CFSI.DATE_KEY